package beans;

import faker.BlobDataFaker;
import faker.BooleanDataFaker;
import faker.DataFaker;
import faker.DateDataFaker;
import faker.IntegerDataFaker;
import faker.RealDataFaker;
import faker.TextDataFaker;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * An object represent a attribute.
 *
 * @author Maroine
 */
public class Attribute implements Serializable {

    private String name;
    private String dataType;
    private boolean isPrimary;
    private boolean isUnique;
    private boolean isNullable;
    private List<String> instances = new ArrayList<>();

    private DataFaker dataFaker;
    private List<Attribute> referencesMe = new ArrayList<>();
    private List<Attribute> references = new ArrayList<>();
    private Table table;
    private boolean isCircular = false;
    private boolean isGenerated = false;
    private boolean isIndex;

    /**
     *
     * @return if this attribute belongs to the index list
     */
    public boolean isIndex() {
        return isIndex;
    }

    /**
     * set this attribute belong to the index list
     *
     * @param isIndex
     */
    public void isIndex(boolean isIndex) {
        this.isIndex = isIndex;
    }

    /**
     * Return true if the name attribute passed in parameter equal to the name
     * of this Attribute
     *
     * @param o
     * @return true if the name of the tow attribute are same
     */
    @Override
    public boolean equals(Object o) {
        return ((Attribute) o).name.equals(name);
    }

    /**
     * Returns <tt>true</tt> if this attribute already generated.
     *
     * @return <tt>true</tt> if this attribute already generated.
     */
    public boolean isGenerated() {

        return isGenerated;
    }

    /**
     * Replaces the the value of isGenerated by the specified value.
     *
     * @param isGenerated
     */
    public void isGenerated(boolean isGenerated) {
        this.isGenerated = isGenerated;
    }

    /**
     * Return <tt>true</tt> if the attribute is in circular schema.
     *
     * @return <tt>true</tt> if the attribute is in circular schema.
     */
    public boolean isCircular() {
        return isCircular;
    }

    /**
     * Return the table how contain the attribute.
     *
     * @return table containing this attribute.
     */
    public Table getTable() {
        return table;
    }

    /**
     * Indicate if attribute is in circular schema.
     *
     * @param accumulator list contain all attribute traversed in searching for
     * circular schema
     * @param _this is the Attribute concerned
     */
    public void testIfCircular(List<Attribute> accumulator, Attribute _this) {

        for (Attribute a : references) {
            if (accumulator.contains(a)) {
                return;
            }
            if (a == _this) {
                _this.isCircular = true;
                return;
            } else {
                accumulator.add(a);
                a.testIfCircular(accumulator, _this);
            }
        }
    }

    /**
     * Return list of attributes referenced by this attribute. if this attribute
     * is a foreign key return a list containing all attributes referenced by
     * this attribute else returned on empty list
     *
     * @return list of attributes referenced by this attribute.
     */
    public List<Attribute> getReferences() {
        return references;
    }

    /**
     * Return list of attributes that reference this attribute. if their are
     * foreign keys how reference this attribute return a list containing all
     * those foreign keys else return an empty list
     *
     * @return list of foreign keys referenced this attribute.
     */
    public List<Attribute> getReferencesMe() {
        return referencesMe;
    }

    /**
     * Initializes a newly created Attribute object. a constructor initialize
     * also each dataFaker with his appropriate class
     *
     * @param table is a table that contain this attribute
     * @param attributeName the name of attribute
     * @param dataType type of attribute
     * @param nullable indicate whether or not the attribute is nullable
     */
    public Attribute(Table table, String attributeName, String dataType, String nullable) {
        this.table = table;
        this.name = attributeName;
        this.dataType = dataType;
        this.isPrimary = false;
        this.isUnique = false;
        this.isNullable = !nullable.equals("0");
        switch (dataType) {
            case "TEXT":
                dataFaker = new TextDataFaker(this);
                break;
            case "DATE":
                dataFaker = new DateDataFaker(this);
                break;
            case "INT":
            case "NUMERIC":
            case "INTEGER":
                dataFaker = new IntegerDataFaker(this);
                break;
            case "DOUBLE":
            case "FLOAT":
            case "REAL":
                dataFaker = new RealDataFaker(this);
                break;
            case "BOOLEAN":
                dataFaker = new BooleanDataFaker(this);
                break;
            case "BLOB":
                dataFaker = new BlobDataFaker(this);
                break;
        }

    }

    /**
     * Return the name of the attribute
     *
     * @return the name of attribute
     */
    public String getName() {
        return name;
    }

    /**
     * Return the type of the attribute
     *
     * @return Return the type of the attribute
     */
    public String getDataType() {
        return dataType;
    }

    /**
     * Set the name of the attribute
     *
     * @param attributeName The name of the attribute
     */
    public void setName(String attributeName) {
        this.name = attributeName;
    }

    /**
     * Set the data type of the attribute
     *
     * @param dataType The type of attribute
     */
    public void setDataType(String dataType) {
        this.dataType = dataType;
    }

    /**
     * Invoke the method values() that generates the data. And mark this
     * attribute as it is generated
     */
    public void startToGenerateRootValues() {
        dataFaker.values();
        isGenerated = true;
    }

    /**
     * Add all values (instances) of this attribute to all attributes that
     * reference him. And for all attributes invoke the
     * startToGenerateWhoReference() and startToGenerateWhoReference() methods.
     */
    public void startToGenerateWhoReference() {
        for (Attribute a : references) {
            if (!a.isGenerated) {
                a.instances.addAll(instances);
                a.isGenerated = true;
                a.startToGenerateWhoReference();
                a.startToGenerateWhoReference();

            }
        }
    }

    /**
     * Add all values (instances) of this attribute to all attributes that
     * referenced by him. And for all attributes invoke the
     * startToGenerateWhoReference() and startToGenerateWhoReference() methods.
     */
    public void startToGenerateWhoReferenceMe() {
        for (Attribute a : referencesMe) {
            if (!a.isGenerated) {
                a.instances.addAll(instances);
                a.isGenerated = true;
                a.startToGenerateWhoReferenceMe();
                a.startToGenerateWhoReference();
            }
        }
    }

    /**
     * Eliminate additional value. The method ensures if the number of values
     * generated for the attribute is the one requested.
     */
    public void fixInstances() {
        if (table.getHowMuch() == instances.size()) {
            return;
        }
        if (isPrimary || isUnique) {
            instances = instances.subList(0, table.getHowMuch());
        } else {
            List<String> newInstances = new ArrayList<>();
            int rest = table.getHowMuch();
            if (rest > 0) {
                int restDiv = rest / instances.size();
                for (int i = 0; i < restDiv; i++) {
                    newInstances.addAll(instances);
                    rest = rest - instances.size();
                }
                newInstances.addAll(instances.subList(0, rest));
                instances = newInstances;
            }

        }
    }

    /**
     * Verify if the attribute is a primary key,
     *
     * @return True if the attribute is a primary key
     */
    public boolean isPrimary() {
        return isPrimary;
    }

    /**
     * Define a primary key
     *
     * @param bool reprisante if the attribute is primary key
     */
    public void isPrimary(boolean bool) {
        isPrimary = bool;
    }

    /**
     * Return the list of instances.
     *
     * @return list of instance
     */
    public List<String> getInstances() {
        return this.instances;
    }

    /**
     * Return a dataFaker generation
     *
     * @param DataFaker
     */
    public DataFaker getDataFaker() {
        return dataFaker;
    }

    /**
     * Set the instance.
     *
     * @param List<String>
     */
    public void setInstances(List<String> instances) {
        this.instances = instances;
    }

    /**
     * Set whether or is not nullable
     *
     * @return
     */
    public boolean isNullable() {
        return this.isNullable;
    }

    /**
     * Verify if the attribute is unique.
     *
     * @return true if the attribute is unique.
     */
    public boolean isUnique() {
        return this.isUnique;
    }

    /**
     * Returns a string representation of the Attribute.
     *
     * @return
     */
    @Override
    public String toString() {
        return table.getTableName() + "(" + this.name + ")";
    }

}
